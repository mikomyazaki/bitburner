{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":321,\"hp\":10,\"max_hp\":10,\"strength\":5,\"defense\":5,\"dexterity\":5,\"agility\":5,\"charisma\":9,\"intelligence\":0,\"hacking_chance_mult\":1.196147475686665,\"hacking_speed_mult\":1.2443522189568377,\"hacking_money_mult\":1.196147475686665,\"hacking_grow_mult\":1.196147475686665,\"hacking_exp\":1044604.0882524775,\"strength_exp\":67.23018655944978,\"defense_exp\":67.23018655944978,\"dexterity_exp\":67.23018655944978,\"agility_exp\":67.23018655944978,\"charisma_exp\":134.46037311889955,\"intelligence_exp\":0,\"hacking_mult\":1.3187525919445482,\"strength_mult\":1.196147475686665,\"defense_mult\":1.196147475686665,\"dexterity_mult\":1.196147475686665,\"agility_mult\":1.196147475686665,\"charisma_mult\":1.196147475686665,\"hacking_exp_mult\":1.3157622232553317,\"strength_exp_mult\":1.3157622232553317,\"defense_exp_mult\":1.3157622232553317,\"dexterity_exp_mult\":1.3157622232553317,\"agility_exp_mult\":1.3157622232553317,\"charisma_exp_mult\":1.3157622232553317,\"company_rep_mult\":1.196147475686665,\"faction_rep_mult\":1.196147475686665,\"money\":6301295855.197053,\"city\":\"Volhaven\",\"location\":\"OmniTek Incorporated\",\"jobs\":{},\"companyName\":\"\",\"currentServer\":\"home\",\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":252.7867053859829,\"onlineTimeSeconds\":19661.200000036464,\"ram\":1,\"totalMoneyGenerated\":4705725.635450065,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":252.7867053859829,\"onlineTimeSeconds\":19308.60000003518,\"ram\":1,\"totalMoneyGenerated\":4702651.000114914,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":81,\"moneyGainRatePerSecond\":252.7867053859829,\"onlineTimeSeconds\":19308.20000003518,\"ram\":1,\"totalMoneyGenerated\":4701764.062069594,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":249.66588186269917,\"onlineTimeSeconds\":19308.00000003518,\"ram\":1,\"totalMoneyGenerated\":4643645.589752533,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":78,\"moneyGainRatePerSecond\":243.42423481613167,\"onlineTimeSeconds\":19307.600000035178,\"ram\":1,\"totalMoneyGenerated\":4528810.519060354,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":249.66588186269917,\"onlineTimeSeconds\":19307.200000035176,\"ram\":1,\"totalMoneyGenerated\":4645983.710736157,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":249.66588186269917,\"onlineTimeSeconds\":19306.800000035175,\"ram\":1,\"totalMoneyGenerated\":4645096.772690847,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":1,\"level\":80,\"moneyGainRatePerSecond\":249.66588186269917,\"onlineTimeSeconds\":19306.600000035174,\"ram\":1,\"totalMoneyGenerated\":4644197.975516147,\"name\":\"hacknet-node-7\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[\"CyberSec\",\"Netburners\",\"Volhaven\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":18,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.196147475686665,\"crime_success_mult\":1.196147475686665,\"isWorking\":true,\"focus\":false,\"workType\":\"Working for Faction\",\"workCostMult\":5,\"workExpMult\":4,\"currentWorkFactionName\":\"CyberSec\",\"currentWorkFactionDescription\":\"carrying out hacking contracts\",\"workHackExpGainRate\":0.19736433348829974,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0.6482055291620608,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":13804.924615879721,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":35682.66271233947,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":17486000,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":72000000,\"work_money_mult\":1.196147475686665,\"hacknet_node_money_mult\":2.080549015522493,\"hacknet_node_purchase_cost_mult\":0.6384030275093168,\"hacknet_node_ram_cost_mult\":0.8345137614500874,\"hacknet_node_core_cost_mult\":0.8345137614500874,\"hacknet_node_level_cost_mult\":0.7093366972325742,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1639604526913,\"totalPlaytime\":91536800,\"playtimeSinceLastAug\":19677800,\"playtimeSinceLastBitnode\":91536800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-338176,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":6355304457,\"hacknet\":37217875.26523323,\"hacknet_expenses\":-1672641.406994968,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":6301294855.197053,\"work\":83340.37922099077,\"servers\":-88000000,\"other\":-1300000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-936216,\"codingcontract\":0,\"corporation\":0,\"crime\":3328432.2409616,\"gang\":0,\"hacking\":13878108073.041328,\"hacknet\":1931419356.6170957,\"hacknet_expenses\":-733316226.5273529,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":7147133126.1678295,\"work\":1684956.282791946,\"servers\":-2112309182.231165,\"other\":-16100000,\"augmentations\":-5804746067.242249}},\"scriptProdSinceLastAug\":6355304457,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"21.8.2.9\",\"isConnectedTo\":true,\"maxRam\":256,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"fl1ght.exe\",\"BruteSSH.exe\"],\"ramUsed\":254.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[876638616,882,7644,2352]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":161813.37875137103,\"onlineMoneyMade\":876638616,\"onlineRunningTime\":18373.810000031783,\"pid\":36,\"ramUsage\":2.6,\"server\":\"home\",\"threads\":98}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":1253}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = args[0];\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum\\r\\n// amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    print(\\\"Required money for new server: \\\", getPurchasedServerCost(ram));\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"early-hack-template.script\\\", hostname);\\r\\n        exec(\\\"early-hack-template.script\\\", hostname, Math.floor((getServerMaxRam(hostname) - getServerUsedRam(hostname)) / getScriptRam(\\\"early-hack-template.script\\\")));\\r\\n        ++i;\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint(\\\"Purchased servers.\\\")\",\"filename\":\"purchase-server-xgb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.35,\"server\":\"home\",\"moduleSequenceNumber\":666}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var scriptName = \\\"early-hack-template.script\\\";\\r\\n\\r\\nvar servers = [\\\"n00dles\\\",\\r\\n    \\\"sigma-cosmetics\\\",\\r\\n    \\\"joesguns\\\",\\r\\n    \\\"nectar-net\\\",\\r\\n    \\\"hong-fang-tea\\\",\\r\\n    \\\"harakiri-sushi\\\",\\r\\n    \\\"iron-gym\\\",\\r\\n    \\\"zer0\\\",\\r\\n    \\\"max-hardware\\\",\\r\\n    \\\"neo-net\\\"];\\r\\n\\r\\nvar purchasedServers = getPurchasedServers(true)\\r\\n\\r\\nreqMem = getScriptRam(scriptName)\\r\\n\\r\\nfor (var i = 0; i < servers.length; ++i) {\\r\\n    var serv = servers[i];\\r\\n    scriptKill(scriptName, serv);\\r\\n\\r\\n    if (Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / reqMem) > 0) {\\r\\n        scp(scriptName, serv);\\r\\n        if (getServerNumPortsRequired(serv) == 1) {\\r\\n            if (!fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            brutessh(serv)\\r\\n        }\\r\\n        nuke(serv);\\r\\n        exec(scriptName, serv, Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / getScriptRam(scriptName)));\\r\\n    }\\r\\n}\\r\\n\\r\\nfor (var i = 0; i < purchasedServers.length; ++i) {\\r\\n    var serv = purchasedServers[i];\\r\\n    scriptKill(scriptName, serv);\\r\\n\\r\\n    if (Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / reqMem) > 0) {\\r\\n        scp(scriptName, serv);\\r\\n        exec(scriptName, serv, Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / getScriptRam(scriptName)));\\r\\n    }\\r\\n}\\r\\n\\r\\nspawn(scriptName, Math.floor(getServerMaxRam(getHostname()) / reqMem))\\r\\n\\r\\ntprint(\\\"Finished refreshing all servers.\\\")\",\"filename\":\"run-early-hack-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":9.3,\"server\":\"home\",\"moduleSequenceNumber\":667}},{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\r\\n    return getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\r\\ndisableLog(\\\"sleep\\\");\\r\\n\\r\\nvar cnt = 8;\\r\\n\\r\\nwhile (hacknet.numNodes() < cnt) {\\r\\n    res = hacknet.purchaseNode();\\r\\n    print(\\\"Purchased hacknet Node with index \\\" + res);\\r\\n};\\r\\n\\r\\nvar nodeUpgradeLevels = []\\r\\nvar smallestLevelNode = 0\\r\\nvar maxNodeLevel = 80\\r\\n\\r\\nwhile (true) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeUpgradeLevels.push(hacknet.getNodeStats(i).level)\\r\\n    }\\r\\n\\r\\n    smallestLevelNode = nodeUpgradeLevels.indexOf(Math.min.apply(Math, nodeUpgradeLevels))\\r\\n\\r\\n    if (hacknet.getNodeStats(smallestLevelNode).level >= maxNodeLevel) {\\r\\n        break;\\r\\n    }\\r\\n\\r\\n    var levelsToUpgrade = 5;\\r\\n    var cost = hacknet.getLevelUpgradeCost(smallestLevelNode, levelsToUpgrade);\\r\\n    while (myMoney() < hacknet.getLevelUpgradeCost(smallestLevelNode, levelsToUpgrade)) {\\r\\n        print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n        levelsToUpgrade--;\\r\\n    }\\r\\n    res = hacknet.upgradeLevel(smallestLevelNode, levelsToUpgrade);\\r\\n    nodeUpgradeLevels = []\\r\\n}\\r\\n\\r\\n\\r\\nprint(\\\"All nodes upgraded to level \\\" + maxNodeLevel);\\r\\n\\r\\nvar maxNodeMemoryLevel = 32\\r\\nvar nodeMemoryLevels = []\\r\\nfor (var i = 0; i < cnt; i++) {\\r\\n    nodeMemoryLevels.push(hacknet.getNodeStats(i).ram)\\r\\n}\\r\\n\\r\\nwhile(Math.min.apply(Math, nodeMemoryLevels) < maxNodeMemoryLevel) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        if (hacknet.getNodeStats(i).ram < maxNodeMemoryLevel) {\\r\\n            var cost = hacknet.getRamUpgradeCost(i, 1);\\r\\n            while (myMoney() < cost) {\\r\\n                print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n                sleep(3000);\\r\\n            }\\r\\n            res = hacknet.upgradeRam(i, 1);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    nodeMemoryLevels = []\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeMemoryLevels.push(hacknet.getNodeStats(i).ram)\\r\\n    }\\r\\n}\\r\\n\\r\\nprint(\\\"All nodes upgraded to \\\" + maxNodeMemoryLevel + \\\"GB RAM\\\");\\r\\n\\r\\nvar maxNodeCoreLevel = 8\\r\\nvar nodeCoreLevels = []\\r\\nfor (var i = 0; i < cnt; i++) {\\r\\n    nodeCoreLevels.push(hacknet.getNodeStats(i).cores)\\r\\n}\\r\\n\\r\\nwhile(Math.min.apply(Math, nodeCoreLevels) < maxNodeCoreLevel) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        if (hacknet.getNodeStats(i).cores < maxNodeCoreLevel) {\\r\\n            var cost = hacknet.getCoreUpgradeCost(i, 1);\\r\\n            while (myMoney() < cost) {\\r\\n                print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n                sleep(3000);\\r\\n            }\\r\\n            res = hacknet.upgradeCore(i, 1);\\r\\n        };\\r\\n    };\\r\\n    \\r\\n    nodeCoreLevels = []\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeCoreLevels.push(hacknet.getNodeStats(i).cores)\\r\\n    }\\r\\n}\\r\\n\\r\\nprint(\\\"All nodes upgraded to \\\" + maxNodeCoreLevel + \\\" cores\\\");\",\"filename\":\"hacknet-upgrade.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"home\",\"moduleSequenceNumber\":1153}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var name = args[1]\\r\\nvar ramLevel = args[2]\\r\\n\\r\\nprint(\\\"Cost of server is: \\\" + getPurchasedServerCost(ramLevel))\\r\\npurchaseServer(name, ramLevel)\",\"filename\":\"purchaseServer.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.1,\"server\":\"home\",\"moduleSequenceNumber\":669}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var purchasedServers = getPurchasedServers()\\r\\n\\r\\nfor (var i = 0; i < purchasedServers.length; i++) {\\r\\n\\tvar serv = purchasedServers[i]\\r\\n\\tkillall(serv)\\r\\n\\tdeleteServer(serv)\\r\\n}\\r\\n\\r\\ntprint(\\\"Deleted all purchased servers.\\\")\",\"filename\":\"delete-purchased-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.6,\"server\":\"home\",\"moduleSequenceNumber\":670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var servName = args[0]\\r\\n\\r\\ntprint(\\\"Details for \\\" + servName)\\r\\ntprint(\\\"Money available: \\\" + (getServerMoneyAvailable(servName)/1e6).toFixed(0) + \\\" / \\\" + (getServerMaxMoney(servName)/1e6).toFixed(0) + \\\"M\\\")\\r\\ntprint(\\\"Security Level: \\\" + getServerSecurityLevel(servName).toFixed(0) + \\\" / \\\" + getServerMinSecurityLevel(servName).toFixed(0))\",\"filename\":\"analyze-server.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = args[0]\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\nvar processes = ps(getHostname());\\r\\nvar threads = processes[0].threads\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        var growthreads = Math.floor(threads/13.5)\\r\\n        grow(target, growthreads);\\r\\n        weaken(target, threads - growthreads);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        var hackthreads = Math.floor(threads/26)\\r\\n        hack(target, hackthreads);\\r\\n        weaken(target, threads - hackthreads);\\r\\n    }\\r\\n}\",\"filename\":\"2port-hack.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.65,\"server\":\"home\",\"moduleSequenceNumber\":1279}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var scriptName = \\\"2port-hack.script\\\";\\r\\nvar target = args[0]\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\nif (fileExists(\\\"FTPcrack.exe\\\", \\\"home\\\")) {\\r\\n    ftpcrack(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\nvar servers = [\\\"n00dles\\\",\\r\\n    \\\"sigma-cosmetics\\\",\\r\\n    \\\"joesguns\\\",\\r\\n    \\\"nectar-net\\\",\\r\\n    \\\"hong-fang-tea\\\",\\r\\n    \\\"harakiri-sushi\\\",\\r\\n    \\\"iron-gym\\\",\\r\\n    \\\"zer0\\\",\\r\\n    \\\"max-hardware\\\",\\r\\n    \\\"neo-net\\\"];\\r\\n\\r\\nvar purchasedServers = getPurchasedServers(true)\\r\\n\\r\\nreqMem = getScriptRam(scriptName)\\r\\n\\r\\nfor (var i = 0; i < servers.length; ++i) {\\r\\n    var serv = servers[i];\\r\\n    killall(serv);\\r\\n\\r\\n    if (Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / reqMem) > 0) {\\r\\n        scp(scriptName, serv);\\r\\n        if (getServerNumPortsRequired(serv) == 1) {\\r\\n            if (!fileExists(\\\"BruteSSH.exe\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            brutessh(serv)\\r\\n        }\\r\\n        if (getServerNumPortsRequired(serv) == 2) {\\r\\n            if (!fileExists(\\\"FTPcrack.exe\\\")) {\\r\\n                continue\\r\\n            }\\r\\n            ftpcrack(serv)\\r\\n        }\\r\\n        nuke(serv);\\r\\n        exec(scriptName, serv, Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / getScriptRam(scriptName)), target);\\r\\n    }\\r\\n}\\r\\n\\r\\nfor (var i = 0; i < purchasedServers.length; ++i) {\\r\\n    var serv = purchasedServers[i];\\r\\n    killall(serv);\\r\\n\\r\\n    if (Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / reqMem) > 0) {\\r\\n        scp(scriptName, serv);\\r\\n        exec(scriptName, serv, Math.floor((getServerMaxRam(serv) - getServerUsedRam(serv)) / getScriptRam(scriptName)), target);\\r\\n    }\\r\\n}\\r\\n\\r\\nspawn(scriptName, Math.floor(getServerMaxRam(getHostname()) / reqMem))\\r\\n\\r\\ntprint(\\\"Finished refreshing all servers.\\\")\",\"filename\":\"run-2port-hack-all-servers.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":8.85,\"server\":\"home\",\"moduleSequenceNumber\":1329}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var securityThresh = 1.25\\r\\nvar moneyThresh = 0.75\\r\\n\\r\\nfunction compareSecondColumn(a, b) {\\r\\n\\tif (a[1] === b[1]) {\\r\\n\\t\\treturn 0;\\r\\n\\t} else {\\r\\n\\t\\treturn (a[1] < b[1]) ? -1 : 1;\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction getRootAccess(host) {\\r\\n\\tif (hasRootAccess(host)) {\\r\\n\\t\\treturn true\\r\\n\\t} else {\\r\\n\\t\\tif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n\\t\\t\\tbrutessh(target);\\r\\n\\t\\t}\\r\\n\\t\\tif (fileExists(\\\"FTPcrack.exe\\\", \\\"home\\\")) {\\r\\n\\t\\t\\tftpcrack(target);\\r\\n\\t\\t}\\r\\n\\t}\\r\\n\\tnuke(target)\\r\\n\\treturn hasRootAccess(host)\\r\\n}\\r\\n\\r\\nfunction apply_action(server, servers) {\\r\\n\\tvar securityDiff = getServerSecurityLevel() / getServerMinSecurityLevel()\\r\\n\\tvar moneyDiff = getServerMoneyAvailable() / getServerMaxMoney()\\r\\n\\r\\n\\tif (securityDiff > securityThresh) {\\r\\n\\t\\ttprint(\\\"ACTION: weakening \\\" + server)\\r\\n\\t\\treturn weakenServer(server, servers)\\r\\n\\t} else if (moneyDiff < moneyThresh) {\\r\\n\\t\\ttprint(\\\"ACTION: growing \\\" + server)\\r\\n\\t\\treturn growServer(server, servers)\\r\\n\\t} else {\\r\\n\\t\\ttprint(\\\"ACTION: hacking \\\" + server)\\r\\n\\t\\treturn hackServer(server, servers)\\r\\n\\t}\\r\\n}\\r\\n\\r\\nfunction weakenServer(server, servers) {\\r\\n\\tvar desiredThreads = Math.floor((getServerSecurityLevel(server) - getServerMinSecurityLevel(server)) / 0.05)\\r\\n\\tvar completionTime = 0\\r\\n\\tfor (var i = 0; i < servers.length, i++) {\\r\\n\\t\\tvar threads = Math.floor((getServerRam(servers[i]) - getServerUsedRam(servers[i])) / getScriptRam(\\\"weakenServer.script\\\"));\\r\\n\\t\\tthreads = Min(threads, desiredThreads);\\r\\n\\r\\n\\t\\tif (threads > 0) {\\r\\n\\t\\t\\texec(\\\"weakenServer.script\\\", servers[i], threads, server)\\r\\n\\t\\t\\tcompletionTime = Math.max(completionTime, getWeakenTime(servers[i]))\\r\\n\\t\\t}\\r\\n\\t\\tdesiredThreads -= threads\\r\\n\\t}\\r\\n\\r\\n\\treturn completionTime\\r\\n}\\r\\n\\r\\nfunction growServer(server, servers) {\\r\\n\\tvar desiredThreads = growthAnalyze(server, Math.min(moneyThresh + 0.1, 1) / (getServerMoneyAvailable() / getServerMaxMoney()))\\r\\n\\tvar completionTime = 0\\r\\n\\tfor (var i = 0; i < servers.length, i++) {\\r\\n\\t\\tvar threads = Math.floor((getServerRam(servers[i]) - getServerUsedRam(servers[i])) / getScriptRam(\\\"growServer.script\\\"));\\r\\n\\t\\tthreads = Min(threads, desiredThreads);\\r\\n\\r\\n\\t\\tif (threads > 0) {\\r\\n\\t\\t\\texec(\\\"growServer.script\\\", servers[i], threads, server)\\r\\n\\t\\t\\tcompletionTime = Math.max(completionTime, getGrowTime(servers[i]))\\r\\n\\t\\t}\\r\\n\\t\\tdesiredThreads -= threads\\r\\n\\t}\\r\\n\\r\\n\\treturn completionTime\\r\\n}\\r\\n\\r\\nfunction hackServer(server, servers) {\\r\\n\\tvar desiredThreads = Math.max((getServerMoneyAvailable() - 0.5 * moneyThresh), 0) / (hackAnalyze(server) / 100)\\r\\n\\tvar completionTime = 0\\r\\n\\tfor (var i = 0; i < servers.length, i++) {\\r\\n\\t\\tvar threads = Math.floor((getServerRam(servers[i]) - getServerUsedRam(servers[i])) / getScriptRam(\\\"hackServer.script\\\"));\\r\\n\\t\\tthreads = Min(threads, desiredThreads);\\r\\n\\r\\n\\t\\tif (threads > 0) {\\r\\n\\t\\t\\texec(\\\"hackServer.script\\\", servers[i], threads, server)\\r\\n\\t\\t\\tcompletionTime = Math.max(completionTime, getHackTime(servers[i]))\\r\\n\\t\\t}\\r\\n\\t\\tdesiredThreads -= threads\\r\\n\\t}\\r\\n\\r\\n\\treturn completionTime\\r\\n}\\r\\n\\r\\n// List of valid target servers\\r\\nvar targetServers = [\\\"iron-gym\\\"]\\r\\n\\r\\n// Find IPs of attached servers to control, make sure we can control them\\r\\nvar servers = scan(getHostname(), true)\\r\\nvar filesList = [\\\"weakenServer.script\\\",\\r\\n\\t\\\"growServer.script\\\",\\r\\n\\t\\\"hackServer.script\\\"]\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n\\tgetRootAccess(servers[i])\\r\\n\\tkillall(servers[i])\\r\\n\\tfor (var j = 0; j < filesList.length; j++) {\\r\\n\\t\\tscp(filesList[j], getHostname(), servers[i])\\r\\n\\t}\\r\\n}\\r\\n\\r\\n// Set up job queue\\r\\nvar queue = []\\r\\n\\r\\nfor (var i = 0; i < servers.length; i++) {\\r\\n\\tqueue.push([servers[i], 0])\\r\\n}\\r\\n\\r\\nwhile (true) {\\r\\n\\t// Does target server need to be acted on?\\r\\n\\tvar jobServer = queue[0][0]\\r\\n\\tvar jobTime = queue[0][1]\\r\\n\\r\\n\\tif (Date.now() > jobTime) {\\r\\n\\t\\tqueue[0][1] = apply_action(jobServer, servers)\\r\\n\\t\\tqueue.sort(compareSecondColumn);\\r\\n\\t}\\r\\n\\r\\n\\tsleep(queue[0][1] - Date.now() + 1)\\r\\n}\",\"filename\":\"control-server.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.55,\"server\":\"home\",\"moduleSequenceNumber\":674}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0]\\r\\n\\r\\nhack(target)\",\"filename\":\"hackServer.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":675}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0]\\r\\n\\r\\nweaken(target)\",\"filename\":\"weakenServer.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":676}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var target = args[0]\\r\\n\\r\\ngrow(target)\",\"filename\":\"growServer.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.75,\"server\":\"home\",\"moduleSequenceNumber\":677}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"pserv-24\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"27.1.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55371701219,\"moneyMax\":1384292530475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1081,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"5.6.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":40022969352,\"moneyMax\":1000574233800,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1142,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"55.7.1.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":16014989932,\"moneyMax\":400374748300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":919,\"serverGrowth\":74}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"15.7.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":17562766139,\"moneyMax\":439069153475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1134,\"serverGrowth\":84}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"92.6.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34012469974,\"moneyMax\":850311749350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1188,\"serverGrowth\":74}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"26.0.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":17286262937,\"moneyMax\":432156573425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1042,\"serverGrowth\":74}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"13.6.1.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":20143707891,\"moneyMax\":503592697275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":974,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"75.0.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":18075319590,\"moneyMax\":451882989750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":963,\"serverGrowth\":92}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"67.3.1.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"stormtech\",\"b-and-a\",\"blade\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":26416588528,\"moneyMax\":660414713200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1072,\"serverGrowth\":98}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"86.8.7.2\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":1511340342,\"moneyMax\":37783508550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1199,\"serverGrowth\":96}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"3.9.8.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1333,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"91.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"run4theh111z\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1152660819,\"moneyMax\":28816520475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":86}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-766558.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[10,[154,193,19,131,117,173,116,198,142,45,108,57,181,36,77,173,167,103,190,121,81,197,155,105,28,44,191,84,140,195,127,30,56,105,170,157,138,144,81,22]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"75.9.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":890126438,\"moneyMax\":22253160950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":71}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"66.7.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"titan-labs\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":894355825,\"moneyMax\":22358895625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":915,\"serverGrowth\":39}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"14.3.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":564993522,\"moneyMax\":14124838050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":78}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"33.5.4.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"microdyne\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":736502043,\"moneyMax\":18412551075,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":802,\"serverGrowth\":79}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"40.4.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":970018753,\"moneyMax\":24250468825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":902,\"serverGrowth\":88}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-645541-Netburners.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[3,8],[23,31],[19,21],[3,10],[13,16],[2,10],[4,8],[8,15],[13,19],[25,35],[7,9],[17,19],[10,14],[1,5],[13,20],[23,32],[18,26]],\"reward\":{\"name\":\"Netburners\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"22.8.3.7\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1136435551,\"moneyMax\":28410888775,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"64.6.3.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":895961342,\"moneyMax\":22399033550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":811,\"serverGrowth\":71}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"67.4.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":551168969,\"moneyMax\":13779224225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":809,\"serverGrowth\":72}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"59.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":874999610,\"moneyMax\":21874990250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":888,\"serverGrowth\":70}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"75.3.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":772195767,\"moneyMax\":19304894175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":861,\"serverGrowth\":87}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-300754.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[136,100,57,35,156,149,114,16,192,42,98,96,30,60,82,16,126,51,114,92,160,91,138,86,135,148,54]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"38.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1007675953,\"moneyMax\":25191898825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":920,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"40.8.4.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"global-pharm\",\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":994686239,\"moneyMax\":24867155975,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":68}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"76.5.2.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1062512080,\"moneyMax\":26562802000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":785,\"serverGrowth\":68}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"75.7.9.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":934479524,\"moneyMax\":23361988100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":840,\"serverGrowth\":73}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"11.0.1.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":732154277,\"moneyMax\":18303856925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"77.6.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1356704400,\"moneyMax\":33917610000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":54}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"25.0.5.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1518655984,\"moneyMax\":37966399600,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":770,\"serverGrowth\":86}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"17.8.6.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zeus-med\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1114146724,\"moneyMax\":27853668100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":798,\"serverGrowth\":75}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"55.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":84,\"hackDifficulty\":84,\"minDifficulty\":28,\"moneyAvailable\":1489262604,\"moneyMax\":37231565100,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":73}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"47.2.3.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"snap-fitness\",\"icarus\",\"univ-energy\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":1059880960,\"moneyMax\":26497024000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":810,\"serverGrowth\":75}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"1.4.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":737152364,\"moneyMax\":18428809100,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":699,\"serverGrowth\":58}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"62.3.9.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":52,\"hackDifficulty\":52,\"minDifficulty\":17,\"moneyAvailable\":611611633,\"moneyMax\":15290290825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":499,\"serverGrowth\":41}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"9.1.1.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":68,\"minDifficulty\":23,\"moneyAvailable\":747259239,\"moneyMax\":18681480975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":543,\"serverGrowth\":56}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"17.2.5.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"syscore\",\"galactic-cyber\",\"global-pharm\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":376762448,\"moneyMax\":9419061200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":425,\"serverGrowth\":30}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"5.3.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":196984736,\"moneyMax\":4924618400,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":426,\"serverGrowth\":43}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"80.0.7.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":986287889,\"moneyMax\":24657197225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":768,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"55.6.0.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":283641318,\"moneyMax\":7091032950,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":460,\"serverGrowth\":40}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-823091.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[11,13],[9,19],[2,12],[21,25]],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"81.8.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":481078116,\"moneyMax\":12026952900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":565,\"serverGrowth\":66}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-837198-CyberSec.cct\",\"type\":\"Array Jumping Game\",\"data\":[0,0,0,4,1,0,0,0,2,5,10,9,5],\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"28.1.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"netlink\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":402849058,\"moneyMax\":10071226450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":427,\"serverGrowth\":27}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"35.7.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":158485933,\"moneyMax\":3962148325,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":277,\"serverGrowth\":51}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"14.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\",\"rothman-uni\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":224402615,\"moneyMax\":5610065375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":336,\"serverGrowth\":46}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"45.8.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"silver-helix\",\"syscore\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":381,\"serverGrowth\":56}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"61.0.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":79103054,\"moneyMax\":1977576350,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":274,\"serverGrowth\":62}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"24.4.0.1\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[11557529,14,76,23]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1688.2615760576462,\"onlineMoneyMade\":11557529,\"onlineRunningTime\":18398.410000031872,\"pid\":26,\"ramUsage\":2.6,\"server\":\"n00dles\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":1330}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.544,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"30.0.3.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"function myMoney() {\\r\\n    return getServerMoneyAvailable(\\\"home\\\");\\r\\n}\\r\\n\\r\\ndisableLog(\\\"getServerMoneyAvailable\\\");\\r\\ndisableLog(\\\"sleep\\\");\\r\\n\\r\\nvar cnt = 8;\\r\\n\\r\\nwhile (hacknet.numNodes() < cnt) {\\r\\n    res = hacknet.purchaseNode();\\r\\n    print(\\\"Purchased hacknet Node with index \\\" + res);\\r\\n};\\r\\n\\r\\nvar nodeUpgradeLevels = []\\r\\nvar smallestLevelNode = 0\\r\\nvar maxNodeLevel = 80\\r\\n\\r\\nwhile (true) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeUpgradeLevels.push(hacknet.getNodeStats(i).level)\\r\\n    }\\r\\n\\r\\n    smallestLevelNode = nodeUpgradeLevels.indexOf(Math.min.apply(Math, nodeUpgradeLevels))\\r\\n\\r\\n    if (hacknet.getNodeStats(smallestLevelNode).level >= maxNodeLevel) {\\r\\n        break;\\r\\n    }\\r\\n\\r\\n    var levelsToUpgrade = 5;\\r\\n    var cost = hacknet.getLevelUpgradeCost(smallestLevelNode, levelsToUpgrade);\\r\\n    while (myMoney() < hacknet.getLevelUpgradeCost(smallestLevelNode, levelsToUpgrade)) {\\r\\n        print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n        levelsToUpgrade--;\\r\\n    }\\r\\n    res = hacknet.upgradeLevel(smallestLevelNode, levelsToUpgrade);\\r\\n    nodeUpgradeLevels = []\\r\\n}\\r\\n\\r\\n\\r\\nprint(\\\"All nodes upgraded to level \\\" + maxNodeLevel);\\r\\n\\r\\nvar maxNodeMemoryLevel = 32\\r\\nvar nodeMemoryLevels = []\\r\\nfor (var i = 0; i < cnt; i++) {\\r\\n    nodeMemoryLevels.push(hacknet.getNodeStats(i).ram)\\r\\n}\\r\\n\\r\\nwhile(Math.min.apply(Math, nodeMemoryLevels) < maxNodeMemoryLevel) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        if (hacknet.getNodeStats(i).ram < maxNodeMemoryLevel) {\\r\\n            var cost = hacknet.getRamUpgradeCost(i, 1);\\r\\n            while (myMoney() < cost) {\\r\\n                print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n                sleep(3000);\\r\\n            }\\r\\n            res = hacknet.upgradeRam(i, 1);\\r\\n        };\\r\\n    };\\r\\n\\r\\n    nodeMemoryLevels = []\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeMemoryLevels.push(hacknet.getNodeStats(i).ram)\\r\\n    }\\r\\n}\\r\\n\\r\\nprint(\\\"All nodes upgraded to \\\" + maxNodeMemoryLevel + \\\"GB RAM\\\");\\r\\n\\r\\nvar maxNodeCoreLevel = 8\\r\\nvar nodeCoreLevels = []\\r\\nfor (var i = 0; i < cnt; i++) {\\r\\n    nodeCoreLevels.push(hacknet.getNodeStats(i).cores)\\r\\n}\\r\\n\\r\\nwhile(Math.min.apply(Math, nodeCoreLevels) < maxNodeCoreLevel) {\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        if (hacknet.getNodeStats(i).cores < maxNodeCoreLevel) {\\r\\n            var cost = hacknet.getCoreUpgradeCost(i, 1);\\r\\n            while (myMoney() < cost) {\\r\\n                print(\\\"Need $\\\" + cost + \\\" . Have $\\\" + myMoney());\\r\\n                sleep(3000);\\r\\n            }\\r\\n            res = hacknet.upgradeCore(i, 1);\\r\\n        };\\r\\n    };\\r\\n    \\r\\n    nodeCoreLevels = []\\r\\n    for (var i = 0; i < cnt; i++) {\\r\\n        nodeCoreLevels.push(hacknet.getNodeStats(i).cores)\\r\\n    }\\r\\n}\\r\\n\\r\\nprint(\\\"All nodes upgraded to \\\" + maxNodeCoreLevel + \\\" cores\\\");\",\"filename\":\"hacknet-upgrade.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":5.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1155}},{\"ctor\":\"Script\",\"data\":{\"code\":\"var ram = args[0];\\r\\n\\r\\n// Iterator we'll use for our loop\\r\\nvar i = 0;\\r\\n\\r\\n// Continuously try to purchase servers until we've reached the maximum\\r\\n// amount of servers\\r\\nwhile (i < getPurchasedServerLimit()) {\\r\\n    // Check if we have enough money to purchase a server\\r\\n    print(\\\"Required money for new server: \\\", getPurchasedServerCost(ram));\\r\\n    if (getServerMoneyAvailable(\\\"home\\\") > getPurchasedServerCost(ram)) {\\r\\n        // If we have enough money, then:\\r\\n        //  1. Purchase the server\\r\\n        //  2. Copy our hacking script onto the newly-purchased server\\r\\n        //  3. Run our hacking script on the newly-purchased server with 3 threads\\r\\n        //  4. Increment our iterator to indicate that we've bought a new server\\r\\n        var hostname = purchaseServer(\\\"pserv-\\\" + i, ram);\\r\\n        scp(\\\"early-hack-template.script\\\", hostname);\\r\\n        exec(\\\"early-hack-template.script\\\", hostname, Math.floor((getServerMaxRam(hostname) - getServerUsedRam(hostname)) / getScriptRam(\\\"early-hack-template.script\\\")));\\r\\n        ++i;\\r\\n    }\\r\\n}\\r\\n\\r\\ntprint(\\\"Purchased servers.\\\")\",\"filename\":\"purchase-server-xgb.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":6.35,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1445}},{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":1391}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"60.5.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[51023274,66,450,150]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9929.204346220324,\"onlineMoneyMade\":51023274,\"onlineRunningTime\":18397.210000031868,\"pid\":27,\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":1331}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":10,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"37.6.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[45638604,60,462,144]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9906.941556206377,\"onlineMoneyMade\":45638604,\"onlineRunningTime\":18395.810000031863,\"pid\":28,\"ramUsage\":2.6,\"server\":\"joesguns\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":1332}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"31.2.4.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[86654016,108,876,312]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19324.101732105923,\"onlineMoneyMade\":86654016,\"onlineRunningTime\":18387.810000031834,\"pid\":33,\"ramUsage\":2.6,\"server\":\"zer0\",\"threads\":12}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"zer0\",\"moduleSequenceNumber\":1337}}],\"serversOnNetwork\":[\"hong-fang-tea\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"64.9.5.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[40782690,54,474,138]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9929.204346220324,\"onlineMoneyMade\":40782690,\"onlineRunningTime\":18394.210000031857,\"pid\":29,\"ramUsage\":2.6,\"server\":\"nectar-net\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":1333}}],\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"59.8.3.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[62200200,84,912,288]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19190.52499202224,\"onlineMoneyMade\":62200200,\"onlineRunningTime\":18384.41000003182,\"pid\":35,\"ramUsage\":2.6,\"server\":\"neo-net\",\"threads\":12}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":1339}}],\"serversOnNetwork\":[\"nectar-net\",\"comptek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"9.4.9.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"87.2.8.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[38951544,54,468,138]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9840.153186164536,\"onlineMoneyMade\":38951544,\"onlineRunningTime\":18392.81000003185,\"pid\":30,\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":1334}}],\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-547769-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,1,0,1,1,0,0,0],[0,0,0,1,0,0,0,0,0],[0,0,0,0,0,1,0,1,0],[0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,0,0,0],[1,0,1,0,1,0,1,0,0]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-140997-CyberSec.cct\",\"type\":\"Total Ways to Sum\",\"data\":8,\"reward\":{\"name\":\"CyberSec\",\"type\":0}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"72.4.9.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":15.6,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[56872530,72,462,138]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10018.255506276111,\"onlineMoneyMade\":56872530,\"onlineRunningTime\":18391.210000031846,\"pid\":31,\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"threads\":6}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":1335}}],\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5,\"minDifficulty\":5,\"moneyAvailable\":5551063.172140421,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"19.6.9.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"crush-fitness\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"26.2.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[73300380,96,924,288]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19457.678472189604,\"onlineMoneyMade\":73300380,\"onlineRunningTime\":18386.210000031828,\"pid\":34,\"ramUsage\":2.6,\"server\":\"max-hardware\",\"threads\":12}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":1338}}],\"serversOnNetwork\":[\"harakiri-sushi\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"20.2.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":29,\"minDifficulty\":10,\"moneyAvailable\":67914669,\"moneyMax\":1697866725,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":201,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"15.6.0.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":37,\"hackDifficulty\":37,\"minDifficulty\":12,\"moneyAvailable\":50380945,\"moneyMax\":1259523625,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":252,\"serverGrowth\":27}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-828899.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[114,67,93,62,28,29,167,152,32,9,173,37,2,81],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"38.8.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":31.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[66442620,96,912,288]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19368.627312133816,\"onlineMoneyMade\":66442620,\"onlineRunningTime\":18389.61000003184,\"pid\":32,\"ramUsage\":2.6,\"server\":\"iron-gym\",\"threads\":12}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":1336}}],\"serversOnNetwork\":[\"home\",\"nectar-net\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":16.887999999999995,\"minDifficulty\":10,\"moneyAvailable\":343156529.7770176,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"28.6.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":46,\"hackDifficulty\":46,\"minDifficulty\":15,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":501,\"serverGrowth\":45}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"20.8.3.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":951,\"serverGrowth\":56}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"63.4.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":781,\"serverGrowth\":45}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"48.8.5.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":509,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"8.1.1.7\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":352,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"33.5.3.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"phantasy\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":203,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"23.4.9.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":546,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-316172.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[142,167,54,41,168,161,150,67,105,171,200,40,93,184,186,187,154,142,198,123,184,24,121,178,53,183,7,55,141,56,81,12,15,172,70,25],\"reward\":{\"name\":\"\",\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"16.8.8.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":54,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"22.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"blade\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"96.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"85.4.9.6\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"27.6.0.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[323102568,408,1680,528]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38826.30578432342,\"onlineMoneyMade\":323102568,\"onlineRunningTime\":16075.610000023422,\"pid\":39,\"ramUsage\":2.6,\"server\":\"pserv-0\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-0\",\"moduleSequenceNumber\":2357}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"22.3.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[112402992,144,1584,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":32770.82690052987,\"onlineMoneyMade\":112402992,\"onlineRunningTime\":14316.210000017021,\"pid\":40,\"ramUsage\":2.6,\"server\":\"pserv-1\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-1\",\"moduleSequenceNumber\":3169}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"28.0.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[190958712,240,1368,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31256.957179581485,\"onlineMoneyMade\":190958712,\"onlineRunningTime\":12556.210000010618,\"pid\":41,\"ramUsage\":2.6,\"server\":\"pserv-2\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-2\",\"moduleSequenceNumber\":3983}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"21.0.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[137700648,192,1248,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28407.320057796285,\"onlineMoneyMade\":137700648,\"onlineRunningTime\":11407.61000000644,\"pid\":42,\"ramUsage\":2.6,\"server\":\"pserv-3\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-3\",\"moduleSequenceNumber\":4536}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"47.1.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[193371912,216,1272,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28585.422377907864,\"onlineMoneyMade\":193371912,\"onlineRunningTime\":11406.410000006435,\"pid\":43,\"ramUsage\":2.6,\"server\":\"pserv-4\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-4\",\"moduleSequenceNumber\":4538}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"80.9.9.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[137087280,168,1224,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28051.115417573135,\"onlineMoneyMade\":137087280,\"onlineRunningTime\":11405.210000006431,\"pid\":44,\"ramUsage\":2.6,\"server\":\"pserv-5\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-5\",\"moduleSequenceNumber\":4540}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"24.4.3.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[183674928,192,1272,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28407.320057796285,\"onlineMoneyMade\":183674928,\"onlineRunningTime\":11404.010000006427,\"pid\":45,\"ramUsage\":2.6,\"server\":\"pserv-6\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-6\",\"moduleSequenceNumber\":4542}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"44.7.0.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[212253096,264,1248,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28941.62701813101,\"onlineMoneyMade\":212253096,\"onlineRunningTime\":11402.810000006422,\"pid\":46,\"ramUsage\":2.6,\"server\":\"pserv-7\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-7\",\"moduleSequenceNumber\":4544}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"47.3.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[181126320,192,1296,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28674.473537963648,\"onlineMoneyMade\":181126320,\"onlineRunningTime\":11401.810000006419,\"pid\":47,\"ramUsage\":2.6,\"server\":\"pserv-8\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-8\",\"moduleSequenceNumber\":4546}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"10.5.9.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[219342216,288,1272,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29654.036298577314,\"onlineMoneyMade\":219342216,\"onlineRunningTime\":11331.610000006163,\"pid\":48,\"ramUsage\":2.6,\"server\":\"pserv-9\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-9\",\"moduleSequenceNumber\":4618}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"75.6.9.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[157636080,216,1272,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28585.42237790786,\"onlineMoneyMade\":157636080,\"onlineRunningTime\":11322.41000000613,\"pid\":49,\"ramUsage\":2.6,\"server\":\"pserv-10\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-10\",\"moduleSequenceNumber\":4620}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"75.8.6.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[222944424,240,1200,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28407.320057796285,\"onlineMoneyMade\":222944424,\"onlineRunningTime\":11321.410000006126,\"pid\":50,\"ramUsage\":2.6,\"server\":\"pserv-11\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-11\",\"moduleSequenceNumber\":4622}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"16.2.5.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[218567376,264,1200,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28674.47353796365,\"onlineMoneyMade\":218567376,\"onlineRunningTime\":11320.010000006121,\"pid\":51,\"ramUsage\":2.6,\"server\":\"pserv-12\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-12\",\"moduleSequenceNumber\":4624}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"47.0.7.2\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[224413056,264,1176,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28051.115417573135,\"onlineMoneyMade\":224413056,\"onlineRunningTime\":11318.810000006117,\"pid\":52,\"ramUsage\":2.6,\"server\":\"pserv-13\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-13\",\"moduleSequenceNumber\":4626}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"46.0.1.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[242445720,288,1200,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28941.62701813101,\"onlineMoneyMade\":242445720,\"onlineRunningTime\":11317.810000006113,\"pid\":53,\"ramUsage\":2.6,\"server\":\"pserv-14\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-14\",\"moduleSequenceNumber\":4628}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"16.5.0.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[187309992,192,1128,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27071.552656959477,\"onlineMoneyMade\":187309992,\"onlineRunningTime\":11316.610000006109,\"pid\":54,\"ramUsage\":2.6,\"server\":\"pserv-15\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-15\",\"moduleSequenceNumber\":4630}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"51.5.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[276526416,288,1176,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28941.62701813101,\"onlineMoneyMade\":276526416,\"onlineRunningTime\":11315.410000006104,\"pid\":55,\"ramUsage\":2.6,\"server\":\"pserv-16\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-16\",\"moduleSequenceNumber\":4632}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"39.3.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[196896864,240,1248,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28674.47353796365,\"onlineMoneyMade\":196896864,\"onlineRunningTime\":11314.2100000061,\"pid\":56,\"ramUsage\":2.6,\"server\":\"pserv-17\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-17\",\"moduleSequenceNumber\":4634}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"20.5.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[159450120,192,1248,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28318.2688977405,\"onlineMoneyMade\":159450120,\"onlineRunningTime\":11313.010000006096,\"pid\":57,\"ramUsage\":2.6,\"server\":\"pserv-18\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-18\",\"moduleSequenceNumber\":4636}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"28.2.2.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[200214192,240,1248,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28674.473537963648,\"onlineMoneyMade\":200214192,\"onlineRunningTime\":11311.810000006091,\"pid\":58,\"ramUsage\":2.6,\"server\":\"pserv-19\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-19\",\"moduleSequenceNumber\":4638}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"57.5.2.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[170034216,168,1224,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":27873.01309746156,\"onlineMoneyMade\":170034216,\"onlineRunningTime\":11310.610000006087,\"pid\":59,\"ramUsage\":2.6,\"server\":\"pserv-20\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-20\",\"moduleSequenceNumber\":4640}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"61.7.2.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[247325112,312,1224,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29208.780498298373,\"onlineMoneyMade\":247325112,\"onlineRunningTime\":11309.410000006083,\"pid\":60,\"ramUsage\":2.6,\"server\":\"pserv-21\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-21\",\"moduleSequenceNumber\":4642}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"64.2.9.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[235957896,264,1224,456]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":29030.6781781868,\"onlineMoneyMade\":235957896,\"onlineRunningTime\":11308.210000006078,\"pid\":61,\"ramUsage\":2.6,\"server\":\"pserv-22\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-22\",\"moduleSequenceNumber\":4644}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"75.8.5.9\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[114037608,144,1224,432]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26893.450336847898,\"onlineMoneyMade\":114037608,\"onlineRunningTime\":11307.010000006074,\"pid\":62,\"ramUsage\":2.6,\"server\":\"pserv-23\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-23\",\"moduleSequenceNumber\":4646}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"pserv-24\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-24\",\"httpPortOpen\":false,\"ip\":\"64.2.2.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":62.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{\"iron-gym\":[198774072,240,1200,480]},\"filename\":\"early-hack-template.script\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":28496.371217852073,\"onlineMoneyMade\":198774072,\"onlineRunningTime\":11305.610000006069,\"pid\":63,\"ramUsage\":2.6,\"server\":\"pserv-24\",\"threads\":24}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"// Defines the \\\"target server\\\", which is the server\\r\\n// that we're going to hack. In this case, it's \\\"foodnstuff\\\"\\r\\nvar target = \\\"iron-gym\\\"\\r\\n// Defines how much money a server should have before we hack it\\r\\n// In this case, it is set to 75% of the server's max money\\r\\nvar moneyThresh = getServerMaxMoney(target) * 0.75;\\r\\n\\r\\n// Defines the maximum security level the target server can\\r\\n// have. If the target's security level is higher than this,\\r\\n// we'll weaken it before doing anything else\\r\\nvar securityThresh = getServerMinSecurityLevel(target) + 5;\\r\\n\\r\\n// If we have the BruteSSH.exe program, use it to open the SSH Port\\r\\n// on the target server\\r\\nif (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n    brutessh(target);\\r\\n}\\r\\n\\r\\n// Get root access to target server\\r\\nnuke(target);\\r\\n\\r\\n// Infinite loop that continously hacks/grows/weakens the target server\\r\\nwhile (true) {\\r\\n    if (getServerSecurityLevel(target) > securityThresh) {\\r\\n        print(\\\"Server's security level is greater than threshold: \\\", securityThresh)\\r\\n        // If the server's security level is above our threshold, weaken it\\r\\n        weaken(target);\\r\\n    } else if (getServerMoneyAvailable(target) < moneyThresh) {\\r\\n        print(\\\"Server's available money is less than threshold: \\\", moneyThresh)\\r\\n        // If the server's money is less than our threshold, grow it\\r\\n        grow(target);\\r\\n    } else {\\r\\n        // Otherwise, hack it\\r\\n        hack(target);\\r\\n    }\\r\\n}\",\"filename\":\"early-hack-template.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"pserv-24\",\"moduleSequenceNumber\":4648}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":1,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":8.071133149090095,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":1.1243,\"isBanned\":true,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":true,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":4.6669,\"isBanned\":true,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":true,\"name\":\"Volhaven\",\"playerReputation\":11.313561540869745}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":50.9877,\"isBanned\":false,\"isMember\":true,\"name\":\"Netburners\",\"playerReputation\":3074.0692645692307}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":1.1674,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":28.2962,\"isBanned\":false,\"isMember\":true,\"name\":\"CyberSec\",\"playerReputation\":920.6181536711978}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{\"igym\":\"run analyze-server.script iron-gym\",\"onet\":\"run analyze-server.script omega-net\"}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":10,\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":200,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#000\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#000\",\"backgroundsecondary\":\"#000\",\"button\":\"#333\"}}","VersionSave":"6","AllGangsSave":"","LastExportBonus":"1639533302290","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}